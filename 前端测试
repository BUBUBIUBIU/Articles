背景
年前，我在自测一个审核业务的需求时遇到了一些问题。对于大部分审核业务，工作人员需要通过一组快捷键（如图所示），来对他们在审核，回查以及质检的内容（如文字，图片或视频）进行判罚或标识。而我开发的这个需求正是为不同的审核业务配置一组一组快捷键的平台。通过该平台，用户可以创建一组快捷键，或将它单独用于某个业务，或将它复用于某些业务。这是一个交互性强，页面状态繁多的需求。且不同的页面状态之间关系复杂。我在自测该需求的时候力求覆盖到每一个使用场景（包括各种边界情况），并且捋清不同使用场景之间切换的逻辑关系，减小自测中冗余的部分。遵循这样的测试原则，大大的增加了开发人员的思维负担，也容易在一个完整的测试流程中，出现漏测，重复测试的情况（有的时候测着测着，会忘记某些case之前到底有没有测过）。针对这种要求严谨细致，量大，机械性重复的工作，自动化测试应运而生。

目前，web开发领域主要将测试分为三大种类。单元测试，集成测试和端到端测试。这三者之间没有特别清晰的分界线。单元测试针对的对象属于整个项目中比较简单，基础的部分，可以是某个函数，某段代码。通过模拟输入确保输出符合预期。集成测试，也称为组装测试或者联合测试。其在单元测试的基础上，将一些模块按照设计要求组装成规模不一的系统，进行测试。比如说将通过的单元测试的函数进行组合集成，诞生出的高阶函数，或者是类的封装，对这些函数或类进行的测试。第三种，也是最贴近于功能或产品实际应用情况的一种测试，端到端测试。端到端测试关注的是用户实际使用该功能或产品时发生了什么。也就是说，它测试的对象不仅包括前端代码，甚至包括相关的后端服务和基础设施。常见的有模拟用户打开浏览器，登陆某社区和进行网络购物等。看了以上这些抽象的定义，让我们运用一个小例子来具体地展示这三种测试在实际开发中的存在。当我们开发一个社区登陆页面时，可以想像用户需要使用邮箱进行登陆。校验用户输入的内容是否正确的函数（isValidEmail）便可以作为单元测试的对象。包含邮箱交互组件，密码交互组件以及其他如按钮等组件的注册表单可以作为集成测试的对象。最后，为了确保用户能正常登陆，开发人员可以使用端到端测试。

按照软件工程自底向上的概念，单元测试，集成测试和端到端测试呈金字塔状分布。可以看到由下往上测试的成本（时间，人力的投入）越来越高，边际效用越来越低。测试逐渐由白盒趋向于黑盒。同时测试的颗粒度不断增大，面对逻辑更加复杂，外部因素更多。但随着越来越多金字塔中上层的测试通过，功能在生产环境正常运行的置信水平就会越来越高，开发人员也会对自己即将交付的功能更有信心。

针对键位配置台这个需求，我决定以端到端测试为主，理由有如下：1. 端到端的测试路径（比如用户创建键位包，增加或删除键位）与用户的执行路径相同，这意味着对测试编写人员而言较低的认知负担，我很容易就理解自己在测什么内容。2.键位配置台强调复杂的交互，通过一个完整的交互流程case往往比通过十几个单元测试带来的置信度更高。并且项目中通用的基础组件不多，这使得我可以把更多的注意力放在交互测试上。3.基于底层业务逻辑来看，键位配置台的交互方式以及流程是相对固定的。就算日后有新功能迭代也不会对现有的交互流程有较大的影响，说明为该平台维护一套测试体系的成本较低。而较为基础的的单元组件在未来是否升级或替换则是一个未知数。

如今市面上已有不少端到端测试的方案。阿X的UI Recoder（1.7k star），比较传统的的Mocha+chai+puppeteer，风头正劲的Cypress（27.9k star，X节跳动Data团队使用），基于BDD的Cucumber+Puppeteer（携X度假在用，以后有空再来聊聊这个），比较中庸的jest+puppeteer（X节跳动飞书团队，大部分会携带recorder）以及京X拼购的纯puppeteer方案（吐槽一下，和前面的方案比起来，它更像是半自动化测试）。当然，每个方案都有其优劣，在这里限于篇幅不去一一比较。我使用的的是jest+puppeteer的组合。最大的原因是我之前有一点jest的使用经验，上手时间成本较低从而不会影响功能交付时间。

Puppeteer, 意为操纵傀儡的人，它能够模拟用户对于浏览器的绝大部分行为。作为一个Node.js库，Puppeteer遵循DevTools协议通过高阶API来控制Chrome（或Chromium）。相比于老前辈Selenium或者PhantomJs，它最大的特点是它的DOM操作能完全在内存中进行（V8引擎处理了这些事情从而不用打开浏览器），这也是为什么它被称为无头浏览器的原因。但也正因为此，相比于基于webdriver的Selenium，Puppeteer无法跨浏览器运作（不过对于审核业务来说没差啦）。Puppeteer不仅仅可被用于前端自动化测试，也能用来做爬虫，分析网站性能等。本文意在结合键位配置台这个需求，利用一个篇幅适当的demo，尽可能的展现出Puppeteer在自动化测试方面威力。

回到业务，我这次测试的两个case以及流程是：
1 用户创建一个新键位包
 开启浏览器，登陆admin系统
 跳转入页面配置中心，
 点击
2 为该键位包新增一个一级校验过的键位。
话不多说，先上代码，









puppeteer 无头浏览器 高阶API DevTools协议 Chrome 相比较Selenium或是PhantomJs,它最大的特点就是它的操作Dom可以完全在内存中进行模拟既在V8引擎中处理而不打开浏览器， Google坐庄
非webDriver，仅支持Chrome，不跨平台

自动化测试有助于 1 回测 方便包升级 2 鼓励重构，代码设计 质量

代码组织 不像 面向对象 更像面向过程

通用组件少

3种测试。界限不清晰

白盒 黑盒

思考
对业务提升 培养新人

文末，系统性地说一下测试的好处

